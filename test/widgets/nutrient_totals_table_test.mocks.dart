// Mocks generated by Mockito 5.4.5 from annotations
// in compostapp/test/widgets/nutrient_totals_table_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i6;

import 'package:compostapp/compost_state.dart' as _i3;
import 'package:compostapp/models/compost_component_model.dart' as _i4;
import 'package:compostapp/services/persistence_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePersistenceManager_0 extends _i1.SmartFake
    implements _i2.PersistenceManager {
  _FakePersistenceManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CompostState].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompostState extends _i1.Mock implements _i3.CompostState {
  MockCompostState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PersistenceManager get persistenceManager =>
      (super.noSuchMethod(
            Invocation.getter(#persistenceManager),
            returnValue: _FakePersistenceManager_0(
              this,
              Invocation.getter(#persistenceManager),
            ),
          )
          as _i2.PersistenceManager);

  @override
  List<_i4.CompostComponent> get components =>
      (super.noSuchMethod(
            Invocation.getter(#components),
            returnValue: <_i4.CompostComponent>[],
          )
          as List<_i4.CompostComponent>);

  @override
  set components(List<_i4.CompostComponent>? _components) => super.noSuchMethod(
    Invocation.setter(#components, _components),
    returnValueForMissingStub: null,
  );

  @override
  String get selectedCurrency =>
      (super.noSuchMethod(
            Invocation.getter(#selectedCurrency),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#selectedCurrency),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setSelectedCurrency(String? currency) => super.noSuchMethod(
    Invocation.method(#setSelectedCurrency, [currency]),
    returnValueForMissingStub: null,
  );

  @override
  void updateComponent(_i4.CompostComponent? updatedComponent) =>
      super.noSuchMethod(
        Invocation.method(#updateComponent, [updatedComponent]),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.CompostComponent> getAvailableComponents(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableComponents, [date]),
            returnValue: <_i4.CompostComponent>[],
          )
          as List<_i4.CompostComponent>);

  @override
  void updateComponentPrice(
    String? componentName,
    double? newPrice, {
    String? currency = 'CFA',
  }) => super.noSuchMethod(
    Invocation.method(
      #updateComponentPrice,
      [componentName, newPrice],
      {#currency: currency},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
