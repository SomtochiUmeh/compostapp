// Mocks generated by Mockito 5.4.5 from annotations
// in compostapp/test/compost_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:compostapp/models/compost_component_model.dart' as _i5;
import 'package:compostapp/models/recipe_model.dart' as _i4;
import 'package:compostapp/services/persistence_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PersistenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistenceManager extends _i1.Mock
    implements _i2.PersistenceManager {
  MockPersistenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> saveRecipe(_i4.Recipe? recipe) =>
      (super.noSuchMethod(
            Invocation.method(#saveRecipe, [recipe]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i4.Recipe?> getLatestRecipe() =>
      (super.noSuchMethod(
            Invocation.method(#getLatestRecipe, []),
            returnValue: _i3.Future<_i4.Recipe?>.value(),
          )
          as _i3.Future<_i4.Recipe?>);

  @override
  _i3.Future<List<_i4.Recipe>> getRecipeHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getRecipeHistory, []),
            returnValue: _i3.Future<List<_i4.Recipe>>.value(<_i4.Recipe>[]),
          )
          as _i3.Future<List<_i4.Recipe>>);

  @override
  _i3.Future<bool> updateComponentInfo(
    List<_i5.CompostComponent>? components,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateComponentInfo, [components]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.CompostComponent>?> getSavedComponents() =>
      (super.noSuchMethod(
            Invocation.method(#getSavedComponents, []),
            returnValue: _i3.Future<List<_i5.CompostComponent>?>.value(),
          )
          as _i3.Future<List<_i5.CompostComponent>?>);

  @override
  _i3.Future<bool> clearCurrentRecipe() =>
      (super.noSuchMethod(
            Invocation.method(#clearCurrentRecipe, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> clearRecipeHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearRecipeHistory, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> clearComponentData() =>
      (super.noSuchMethod(
            Invocation.method(#clearComponentData, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
